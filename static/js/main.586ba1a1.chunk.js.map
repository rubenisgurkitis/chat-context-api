{"version":3,"sources":["context/chat-context.js","constants/api.js","constants/user.js","context/GlobalState.js","components/message.js","components/messages.js","components/message-input.js","pages/chat.js","App.js","serviceWorker.js","index.js"],"names":["chatInitialState","messages","ChatContext","React","createContext","API_URL","API_TOKEN","API_QUERY","API_HEADERS","Content-Type","USER_NAME","GlobalState","state","fetchMessages","fetch","concat","headers","then","response","json","payload","_this","length","setState","catch","error","console","log","postMessage","message","newMessage","author","timeStamp","Date","now","method","body","JSON","stringify","timestamp","parseInt","previousState","Object","toConsumableArray","this","timer","setInterval","clearInterval","react_default","a","createElement","Provider","value","props","children","Component","Message","containerClass","isSelfMessage","className","text","date","Messages","scrollToBottom","refs","scrollIntoView","behavior","context","map","src_components_message","key","_id","he","decode","toDateString","ref","contextType","ENTER_KEY","ChatInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hasInputValue","inputValue","sendMessage","onKeyPress","e","handleChange","target","type","onChange","placeholder","disabled","onClick","Chat","Fragment","components_messages","components_message_input","App","context_GlobalState","pages_chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.586ba1a1.chunk.js","sourcesContent":["import React from 'react';\n\nconst chatInitialState = {\n    messages: []\n};\n\nconst ChatContext = React.createContext(chatInitialState);\n\nexport { chatInitialState, ChatContext };\n","export const API_URL = 'https://chatty.kubernetes.doodle-test.com/api/chatty/v1.0/?token=';\nexport const API_TOKEN = 'NYqxdHu8RvzU';\nexport const API_QUERY = '&since=1557157472638';\nexport const API_HEADERS = {\n    'Content-Type': 'application/json'\n};","export const USER_NAME = 'Doodle';","import React, { Component } from 'react';\nimport { chatInitialState ,ChatContext } from './chat-context';\nimport { API_URL, API_TOKEN, API_HEADERS, API_QUERY } from '../constants/api';\nimport { USER_NAME } from '../constants/user';\n\nclass GlobalState extends Component {\n    state = chatInitialState;\n\n    componentDidMount() {\n        this.fetchMessages();\n        this.timer = setInterval(this.fetchMessages, 3000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    fetchMessages = () => {\n        fetch(`${API_URL}${API_TOKEN}${API_QUERY}`, {headers: API_HEADERS})\n            .then(response => response.json())\n            .then((payload) => {\n                // No new messages means that an update is not required\n                if (this.state.messages.length !== payload.length) this.setState({ messages: payload });\n            })\n            .catch((error) => {\n                console.log('Something went wrong', error);\n            });\n    }\n\n    postMessage = (message) => {\n        const newMessage = {\n            author: USER_NAME,\n            timeStamp: Date.now(),\n            message\n        };\n\n        fetch(`${API_URL}${API_TOKEN}`, {\n            method: 'POST',\n            headers: API_HEADERS,\n            body: JSON.stringify(newMessage)\n        })\n        .then(response => response.json())\n        .then((payload) => {\n            // Ugly but API is returning a string even though we are sending a number\n            payload.timestamp = parseInt(payload.timestamp, 10);\n            this.setState(previousState => ({ messages: [...previousState.messages, payload] }));\n        })\n        .catch((error) => {\n            console.log('Something went wrong posting a message', error);\n        });\n    }\n\n    render() {\n        return (\n            <ChatContext.Provider\n                value={{\n                    messages: this.state.messages,\n                    postMessage: this.postMessage\n                }}\n            >\n                {this.props.children}\n            </ChatContext.Provider>\n        );\n    }\n}\n\nexport default GlobalState;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './message.css';\n\nclass Message extends Component {\n    render() {\n        const containerClass = this.props.isSelfMessage ? 'message message--self' : 'message';\n        return (\n            <div className={containerClass}>\n                <div className=\"message__author\">{this.props.author}</div>\n                <div className=\"message__text\">{this.props.text}</div>\n                <div className=\"message__date\">{this.props.date}</div>\n            </div>\n        );\n    }\n}\n\nMessage.propTypes = {\n    author: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    isSelfMessage: PropTypes.bool.isRequired\n};\n\nexport default Message;\n","import React, { Component } from 'react';\nimport { ChatContext } from '../context/chat-context';\nimport Message from './message';\nimport he from 'he';\n\nimport { USER_NAME } from '../constants/user';\n\nimport './messages.css';\n\nclass Messages extends Component {\n    static contextType = ChatContext;\n\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    scrollToBottom = () => {\n        this.refs.scrollToBottom.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    render() {\n        return (\n            <div className=\"messages-container\">\n                {\n                    this.context.messages.map((message) =>\n                        <Message\n                            key={message._id}\n                            author={message.author}\n                            text={he.decode(message.message)}\n                            date={new Date(message.timestamp).toDateString()}\n                            isSelfMessage={message.author === USER_NAME}\n                        />\n                    )\n                }\n                <div ref=\"scrollToBottom\"></div>\n            </div>\n        );\n    }\n\n}\n\nexport default Messages;\n","import React, { Component } from 'react';\nimport { ChatContext } from '../context/chat-context';\n\nimport './message-input.css';\n\nconst INPUT_PLACEHOLDER = 'Message';\nconst BUTTON_TEXT = 'Send';\nconst ENTER_KEY = 'Enter';\n\nclass ChatInput extends Component {\n    static contextType = ChatContext;\n\n    constructor(props) {\n        super(props);\n        this.state = { inputValue: '' };\n    }\n\n    hasInputValue = () => {\n        return this.state.inputValue.length > 0;\n    }\n\n    sendMessage = () => {\n        if (this.hasInputValue()) {\n            this.context.postMessage(this.state.inputValue);\n            this.setState({ inputValue: '' });\n        }\n    }\n\n    onKeyPress = (e) => {\n        if (e.key === ENTER_KEY) {\n            this.sendMessage();\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({ inputValue: e.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"message-input\">\n                <input\n                    className=\"message-input__text\"\n                    type=\"text\"\n                    value={this.state.inputValue}\n                    onChange={this.handleChange}\n                    placeholder={INPUT_PLACEHOLDER}\n                    onKeyPress={this.onKeyPress}>\n                </input>\n                <button\n                    className=\"message-input__submit\"\n                    disabled={!this.hasInputValue()}\n                    onClick={this.sendMessage}>\n                    {BUTTON_TEXT}\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default ChatInput;\n","import React, { Component } from 'react';\nimport Messages from '../components/messages';\nimport MessageInput from '../components/message-input';\n\nimport './chat.css';\n\nclass Chat extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <header className=\"header\">\n                    <h1>Doodle chat</h1>\n                </header>\n                <div className=\"chat-container\">\n                    <Messages></Messages>\n                    <MessageInput></MessageInput>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Chat;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport GlobalState from './context/GlobalState';\nimport Chat from './pages/chat';\n\nfunction App() {\n  return (\n    <GlobalState>\n      <Chat/>\n      {/* <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div> */}\n    </GlobalState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}